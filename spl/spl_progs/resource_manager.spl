alias functionNum R1;
alias currentPID R2;


if (functionNum == ACQUIRE_TERMINAL) then
    while ([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;

    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;


if (functionNum == RELEASE_TERMINAL) then
    if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
        R0 = -1;
    endif;

    [TERMINAL_STATUS_TABLE] = 0;
    alias counter R3;
    alias process_table_entry R4;
    counter = 0;
    while (counter < 16) do
        process_table_entry = PROCESS_TABLE + counter*16;
        if ([process_table_entry + 1] > -1 && [process_table_entry + 4] == WAIT_TERMINAL) then
            [process_table_entry + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = 0;
    return;
endif;


if (functionNum == ACQUIRE_DISK) then
    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
        multipush(R1, R2);
        call SCHEDULER;
        multipop(R1, R2);
    endwhile;

    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

//Why does this take PID as an argument??
if (functionNum == ACQUIRE_SEMAPHORE) then
    alias PID R2;
    alias sem_table_index R3;
    sem_table_index = 0;

    while (sem_table_index < MAX_SEM_COUNT) do
        if ([SEMAPHORE_TABLE + 4*sem_table_index + 1] == 0) then
            break;
        endif;
        sem_table_index = sem_table_index + 1;
    endwhile;

    if (sem_table_index == MAX_SEM_COUNT) then
        R0 = -1;
        return;
    else
        [SEMAPHORE_TABLE + 4*sem_table_index] = -1;
        [SEMAPHORE_TABLE + 4*sem_table_index + 1] = 1;
        R0 = sem_table_index;
        return;
    endif;
endif;

if (functionNum == RELEASE_SEMAPHORE) then
    alias sem_table_index R2;
    alias PID R3;

    if ([SEMAPHORE_TABLE + 4*sem_table_index] == PID) then
        [SEMAPHORE_TABLE + 4*sem_table_index] = -1;

        alias counter R4;
        counter = 0;

        while (counter < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + 16*counter + 4] == WAIT_SEMAPHORE
                && [PROCESS_TABLE + 16*counter + 5] == sem_table_index
            ) then
                [PROCESS_TABLE + 16*counter + 4] = READY;
            endif;
            
            counter = counter + 1;
        endwhile;
    endif;

    [SEMAPHORE_TABLE + 4*sem_table_index + 1] =
        [SEMAPHORE_TABLE + 4*sem_table_index + 1] - 1;

    return;
endif;

if (functionNum == ACQUIRE_INODE) then
    alias inode_index R2;
    alias PID R3;

    // Wait for file to become free
    while ([FILE_STATUS_TABLE + 4*inode_index] != PID
           && [FILE_STATUS_TABLE + 4*inode_index] != -1
    ) do
        [PROCESS_TABLE + PID*16 + 4] = WAIT_FILE;
        [PROCESS_TABLE + PID*16 + 5] = inode_index;

        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);
    endwhile;

    // Check if file is already deleted
    if ([INODE_TABLE + 16*inode_index + 1] == -1) then
        R0 = -1;
        return;
    endif;

    // Lock the inode
    [FILE_STATUS_TABLE + 4*inode_index] = PID;
    R0 = 0;
    return;
endif;

if (functionNum == RELEASE_INODE) then
    alias inode_index R2;
    alias PID R3;

    if ([FILE_STATUS_TABLE + 4*inode_index] != PID) then
        // Calling process isn't holding the lock
        R0 = -1;
        return;
    endif;

    [FILE_STATUS_TABLE + 4*inode_index] = -1;

    alias counter R4;
    counter = 1;

    while (counter < MAX_PROC_NUM) do
        if ([PROCESS_TABLE + 16*counter + 4] == WAIT_FILE
            && [PROCESS_TABLE + 16*counter + 5] == inode_index
        ) then
            [PROCESS_TABLE + 16*counter + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = 0;
    return;
endif;

if (functionNum == ACQUIRE_BUFFER) then
    alias buffer R2;
    alias currentPID R3;

    while ([BUFFER_TABLE + 4*buffer + 2] != -1 
           && [BUFFER_TABLE + 4*buffer + 2] != currentPID
        ) do
        [PROCESS_TABLE + 16*currentPID + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + 16*currentPID + 5] = buffer;

        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);
    endwhile;

    [BUFFER_TABLE + 4*buffer + 2] = currentPID;
    R0 = 0;
    return;
endif;

if (functionNum == RELEASE_BUFFER) then
    alias buffer R2;
    alias currentPID R3;
    alias counter R4;
    counter = 1;

    if ([BUFFER_TABLE + 4*buffer + 2] != currentPID) then
        R0 = -1;
        return;
    endif;

    [BUFFER_TABLE + 4*buffer + 2] = -1;

    while (counter < MAX_PROC_NUM) do
        if ([PROCESS_TABLE + 16*counter + 4] == WAIT_BUFFER
            && [PROCESS_TABLE + 16*counter + 5] == buffer
        ) then
            [PROCESS_TABLE + 16*counter + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = 0;
    return;
endif;