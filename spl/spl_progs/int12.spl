alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

[process_table_entry + 9] = INT_LOGOUT;

alias physicalPageNum R2;
alias offset R3;

if ([SYSTEM_STATUS_TABLE + 1] != 2) then
    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1) % 512;
    [physicalPageNum*512 + offset] = -1;

    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

multipush(R0, R1);
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 1];
call PROCESS_MANAGER;
multipop(R0, R1);

[process_table_entry + 4] = TERMINATED;
// Set first word of user stack to first line of code of shell
// So for next user, it starts as a new process
[process_table_entry + 13] = 8*512;
[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

[PROCESS_TABLE + 1*16 + 4] = READY;
[SYSTEM_STATUS_TABLE] = 0;

call SCHEDULER;