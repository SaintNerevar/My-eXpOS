//Library
loadi(63, 13);
loadi(64, 14);

//INIT code
loadi(65, 7);
loadi(66, 8);

//Shell code
loadi(67, 9);
loadi(68, 10);

//INT 4
loadi(10, 23);
loadi(11, 24);

//INT 8
loadi(18, 31);
loadi(19, 32);

//INT 9
loadi(20, 33);
loadi(21, 34);

//INT 10
loadi(22, 35);
loadi(23, 36);

//INT 11
loadi(24, 37);
loadi(25, 38);

// INT 12
loadi(26, 39);
loadi(27, 40);

//INT 13
loadi(28, 41);
loadi(29, 42);

//INT 14
loadi(30, 43);
loadi(31, 44);

//INT 15
loadi(32, 45);
loadi(33, 46);

// INT 16
loadi(34, 47);
loadi(35, 48);

// INT 17
loadi(36, 49);
loadi(37, 50);

//Exception Handler
loadi(2, 15);
loadi(3, 16);

//Console Interrupt
loadi(8, 21);
loadi(9, 22);

//Timer Interrupt
loadi(4, 17);
loadi(5, 18);

//Disk Interrupt
loadi(6, 19);
loadi(7, 20);

//INT 5 (OPEN, CLOSE)
loadi(12, 25);
loadi(13, 26);

//INT 6 (READ)
loadi(14, 27);
loadi(15, 28);

//INT 7 (write)
loadi(16,29);
loadi(17,30);

//Scheduler Module
loadi(50,63);
loadi(51,64);

//Resource Manager Module
loadi(40, 53);
loadi(41, 54);
[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

//File Manager
loadi(46, 59);
loadi(47, 60);

//Device Manager Module
loadi(48, 61);
loadi(49, 62);

//Process Manager
loadi(42, 55);
loadi(43, 56);

//Memory Manager
loadi(44, 57);
loadi(45, 58);

//Inode Table
loadi(59, 3);
loadi(60, 4);

//Root File
loadi(62, 5);

//Disk Free List
loadi(61, 2);

PTBR = PAGE_TABLE_BASE + 20;

// INIT/LOGIN
//Shared Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";


//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";


//Stack
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

//Process Table Entry INIT
alias process_table_entry R0;
process_table_entry = PROCESS_TABLE + 16;
[process_table_entry + 1] = 1; //PID of INIT
[process_table_entry + 3] = 0; // UserID is kernel
[process_table_entry + 4] = CREATED;
[process_table_entry + 11] = 77; //User Area Page Number
[process_table_entry + 12] = 0;
[process_table_entry + 13] = 8*512;
[process_table_entry + 14] = PAGE_TABLE_BASE + 20;
[process_table_entry + 15] = 10;
[66*512] = [65*512 + 1];

PTBR = PAGE_TABLE_BASE + 40;

// SHELL
//Shared Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";


//Code
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";


//Stack
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0000";

//Process Table Entry SHELL
process_table_entry = PROCESS_TABLE + 32;
[process_table_entry + 1] = 2; //PID of SHELL
[process_table_entry + 2] = 1;
[process_table_entry + 3] = -1;
[process_table_entry + 4] = TERMINATED;
[process_table_entry + 11] = 80; //User Area Page Number
[process_table_entry + 12] = 0;
[process_table_entry + 13] = 8*512;
[process_table_entry + 14] = PAGE_TABLE_BASE + 40;
[process_table_entry + 15] = 10;
[78*512] = [67*512 + 1];

//per process resource table for SHELL and INIT
alias counter R1;
counter = 0;
while (counter < 16) do
    [[PROCESS_TABLE + 32 + 11]*512 + 496 + counter] = -1;
    [[PROCESS_TABLE + 16 + 11]*512 + 496 + counter] = -1;
    counter = counter + 1;
endwhile;

//Disk Map table for SHELL
counter = 0;
while (counter < 10) do
    [DISK_MAP_TABLE + 2*10 + counter] = -1;
    counter = counter + 1;
endwhile;
[DISK_MAP_TABLE + 2*10 + 4] = 9;
[DISK_MAP_TABLE + 2*10 + 5] = 10;

alias currentPID R2;
currentPID = 2;

//Initialize STATE for all other processes
while (currentPID < 16) do
    process_table_entry = PROCESS_TABLE + currentPID*16;
    [process_table_entry + 4] = TERMINATED;
    currentPID = currentPID + 1;
endwhile;

//Initialize Memory Free List
counter = 0;
while (counter < MAX_MEM_PAGE) do
    if (counter < 81) then
        [MEMORY_FREE_LIST + counter] = 1;
    else
        [MEMORY_FREE_LIST + counter] = 0;
    endif;
    counter = counter + 1;
endwhile;

//Initialize Semaphore Table
counter = 0;
alias semtable_entry R0;
while (counter < MAX_SEM_COUNT) do
    semtable_entry = SEMAPHORE_TABLE + 4*counter;
    [semtable_entry] = -1;
    [semtable_entry + 1] = 0;
    counter = counter + 1; 
endwhile;

// Initialize File Status Table
counter = 0;
alias fst_entry R0;
while (counter < MAX_FILE_NUM) do
    fst_entry = FILE_STATUS_TABLE + 4*counter;
    [fst_entry] = -1;
    [fst_entry + 1] = -1;
    counter = counter + 1;
endwhile;

// Initialize Buffer Table
counter = 0;
alias buffer_table_entry R0;
while (counter < MAX_BUFFER) do
    buffer_table_entry = BUFFER_TABLE + 4*counter;
    [buffer_table_entry] = -1;
    [buffer_table_entry + 1] = 0;
    [buffer_table_entry + 2] = -1;
    counter = counter + 1; 
endwhile;

//Initialize Open File Table
counter = 0;
alias oft_entry R0;
while (counter < MAX_OPENFILE_NUM) do
    oft_entry = OPEN_FILE_TABLE + 4*counter;
    [oft_entry] = -1;
    [oft_entry + 1] = -1;
    [oft_entry + 2] = 0;
    [oft_entry + 3] = -1;
    counter = counter + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 47;

return;