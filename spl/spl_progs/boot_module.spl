//Library
loadi(63, 13);
loadi(64, 14);

//INIT code
loadi(65, 7);
loadi(66, 8);

//INT 10
loadi(22, 35);
loadi(23, 36);

//Exception Handler
loadi(2, 15);
loadi(3, 16);

//Timer Interrupt
loadi(4, 17);
loadi(5, 18);

//INT 7 (write)
loadi(16,29);
loadi(17,30);

//Scheduler Module
loadi(50,63);
loadi(51,64);

//Resource Manager Module
loadi(40, 53);
loadi(41, 54);
[TERMINAL_STATUS_TABLE] = 0;

//Device Manager Module
loadi(48, 61);
loadi(49, 62);

PTBR = PAGE_TABLE_BASE + 20;

// INIT
//Shared Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";


//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";


//Stack
[PTBR + 16] = 76; //User Program pages start from 76
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//Process Table Entry INIT
[PROCESS_TABLE + 16 + 1] = 1; //PID of INIT
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; //User Area Page Number
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;
[76*512] = [65*512 + 1];

alias currentPID R0;
alias currentFreeMemBlock R1;
alias currentDiskBlock R2;
alias process_table_entry R3;
currentPID = 2;
currentFreeMemBlock = 83;
currentDiskBlock = 69;

while (currentPID < 4) do
    PTBR = PAGE_TABLE_BASE + currentPID*20;

    //Shared Library
    [PTBR + 0] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";

    //Heap
    [PTBR + 4] = currentFreeMemBlock;
    [PTBR + 5] = "0110";
    [PTBR + 6] = currentFreeMemBlock + 1;
    [PTBR + 7] = "0110";

    //Load Code into Memory (Assumes single block of code)
    loadi(currentFreeMemBlock + 2, currentDiskBlock);
    [PTBR + 8] = currentFreeMemBlock + 2;
    [PTBR + 9] = "0100";
    [PTBR + 10] = currentFreeMemBlock + 3;
    [PTBR + 11] = "0100";
    [PTBR + 12] = -1;
    [PTBR + 13] = "0000";
    [PTBR + 14] = -1;
    [PTBR + 15] = "0000";

    //Stack
    [PTBR + 16] = currentFreeMemBlock + 4;
    [PTBR + 17] = "0110";
    [PTBR + 18] = currentFreeMemBlock + 5;
    [PTBR + 19] = "0110";

    //Initialize process table
    process_table_entry = PROCESS_TABLE + currentPID*16;
    [process_table_entry + 1] = currentPID;
    [process_table_entry + 4] = CREATED;
    [process_table_entry + 11] = currentFreeMemBlock + 6;
    [process_table_entry + 12] = 0;
    [process_table_entry + 13] = 8*512;
    [process_table_entry + 14] = PTBR;
    [process_table_entry + 15] = 10;
    [(currentFreeMemBlock+4)*512] = [(currentFreeMemBlock+2)*512 + 1];

    currentFreeMemBlock = currentFreeMemBlock + 7;
    currentDiskBlock = currentDiskBlock + 1;
    currentPID = currentPID + 1;
endwhile;

while (currentPID < 16) do
    process_table_entry = PROCESS_TABLE + currentPID*16;
    [process_table_entry + 4] = TERMINATED;
    currentPID = currentPID + 1;
endwhile;

return;