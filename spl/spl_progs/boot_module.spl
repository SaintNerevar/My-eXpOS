//Library
loadi(63, 13);
loadi(64, 14);

//INIT code
loadi(65, 7);
loadi(66, 8);

//INT 9
loadi(20, 33);
loadi(21, 34);

//INT 10
loadi(22, 35);
loadi(23, 36);

//Exception Handler
loadi(2, 15);
loadi(3, 16);

//Console Interrupt
loadi(8, 21);
loadi(9, 22);

//Timer Interrupt
loadi(4, 17);
loadi(5, 18);

//Disk Interrupt
loadi(6, 19);
loadi(7, 20);

//INT 6 (READ)
loadi(14, 27);
loadi(15, 28);

//INT 7 (write)
loadi(16,29);
loadi(17,30);

//Scheduler Module
loadi(50,63);
loadi(51,64);

//Resource Manager Module
loadi(40, 53);
loadi(41, 54);
[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

//Device Manager Module
loadi(48, 61);
loadi(49, 62);

//Process Manager
loadi(42, 55);
loadi(43, 56);

//Memory Manager
loadi(44, 57);
loadi(45, 58);

//Inode Table
loadi(59, 3);
loadi(60, 4);

PTBR = PAGE_TABLE_BASE + 20;

// INIT
//Shared Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";


//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";


//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";


//Stack
[PTBR + 16] = 76; //User Program pages start from 76
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//Process Table Entry INIT
[PROCESS_TABLE + 16 + 1] = 1; //PID of INIT
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80; //User Area Page Number
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;
[76*512] = [65*512 + 1];

//per process resource table for INIT
alias counter R0;
counter = 0;
while (counter < 16) do
    [[PROCESS_TABLE + 16 + 11]*512 + 496 + counter] = -1;
    counter = counter + 1;
endwhile;

alias currentPID R1;
alias process_table_entry R2;
currentPID = 2;

//Initialize STATE for all other processes
while (currentPID < 16) do
    process_table_entry = PROCESS_TABLE + currentPID*16;
    [process_table_entry + 4] = TERMINATED;
    currentPID = currentPID + 1;
endwhile;

//Initialize Memory Free List
counter = 0;
while (counter < MAX_MEM_PAGE) do
    if (counter < 83) then
        [MEMORY_FREE_LIST + counter] = 1;
    else
        [MEMORY_FREE_LIST + counter] = 0;
    endif;
    counter = counter + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 45;

return;