alias functionNum R1;

if (functionNum == SWAP_IN) then
    alias PID R2;
    PID = 3;
    alias swap_pid R3;
    swap_pid = -1;

    while (PID < 15) do
        if ([PROCESS_TABLE + 16*PID + 4] == READY
            && [PROCESS_TABLE + 16*PID + 6] == 1
        ) then
            if (swap_pid == -1
                || [PROCESS_TABLE + 16*PID] > [PROCESS_TABLE + 16*swap_pid]
            ) then
                swap_pid = PID;
            endif;
        endif;
        PID = PID + 1;
    endwhile;
    PID = swap_pid;

    if (PID != -1) then
        alias process_table_entry R3;
        alias page_table_entry R4;
        process_table_entry = PROCESS_TABLE + 16*PID;
        page_table_entry = [process_table_entry + 14];

        [process_table_entry] = 0;

        alias page R5;
        page = 2;
        while (page < 10) do
            if (page < 4 || page > 7) then
                // Heap or Stack page
                if ([DISK_MAP_TABLE + 10*PID + page] != -1) then
                    // Disk map table contains -1 if page not swapped.
                    multipush(R1, R2, R3, R4, R5);
                    R1 = GET_FREE_PAGE;
                    call MEMORY_MANAGER;
                    multipop(R1, R2, R3, R4, R5);

                    [page_table_entry + 2*page] = R0;

                    multipush(R1, R2, R3, R4, R5);
                    R1 = DISK_LOAD;
                    R4 = [DISK_MAP_TABLE + PID*10 + page];
                    R2 = [SYSTEM_STATUS_TABLE + 1];
                    R3 = R0;
                    call DEVICE_MANAGER;
                    multipop(R1, R2, R3, R4, R5);

                    multipush(R1, R2, R3, R4, R5);
                    R1 = RELEASE_BLOCK;
                    R2 = [DISK_MAP_TABLE + PID*10 + page];
                    call MEMORY_MANAGER;
                    multipop(R1, R2, R3, R4, R5);

                    [page_table_entry + 2*page + 1] = "0110";
                endif;
            endif;
            page = page + 1;
        endwhile;

        [process_table_entry + 6] = 0;
        [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] - 1;
    endif;

    [SYSTEM_STATUS_TABLE + 5] = 0;
endif;

if (functionNum == SWAP_OUT) then
    alias PID R2;
    PID = 3;

    while (PID < 15) do
        if ([PROCESS_TABLE + 16*PID + 4] == WAIT_PROCESS
            && [PROCESS_TABLE + 16*PID + 6] == 0
        ) then
            break;
        endif;
        PID = PID + 1;
    endwhile;

    if (PID == 15) then
        PID = 3;
        while (PID < 15) do
            if ([PROCESS_TABLE + 16*PID + 4] == WAIT_SEMAPHORE
                && [PROCESS_TABLE + 16*PID + 6] == 0
            ) then
                break;
            endif;
            PID = PID + 1;
        endwhile;
    endif;

    if (PID == 15) then
        // Find PID with highest tick
        PID = 3;
        alias swap_pid R3;
        swap_pid = -1;
        while (PID < 15) do
            if ([PROCESS_TABLE + 16*PID + 4] != RUNNING
                && [PROCESS_TABLE + 16*PID + 4] != ALLOCATED
                && [PROCESS_TABLE + 16*PID + 4] != TERMINATED
                && [PROCESS_TABLE + 16*PID + 6] == 0
            ) then
                if (swap_pid == -1
                    || [PROCESS_TABLE + 16*PID] > [PROCESS_TABLE + 16*swap_pid]
                ) then
                    swap_pid = PID;
                endif;
            endif;
            PID = PID + 1;
        endwhile;
        PID = swap_pid;
    endif;
    
    if (PID != -1) then
        alias process_table_entry R3;
        alias page_table_entry R4;
        process_table_entry = PROCESS_TABLE + 16*PID;
        page_table_entry = [process_table_entry + 14];

        [process_table_entry] = 0;

        alias page R5;
        page = 2;
        while (page < 10) do
            if ([page_table_entry + 2*page] != -1) then
                if (page < 4 || page > 7) then
                    // Heap or Stack page
                    if ([MEMORY_FREE_LIST + [page_table_entry + 2*page]] != 1
                    ) then
                        page = page + 1;
                        continue;
                    endif;

                    multipush(R1, R2, R3, R4, R5);
                    R1 = GET_SWAP_BLOCK;
                    call MEMORY_MANAGER;
                    multipop(R1, R2, R3, R4, R5);

                    [DISK_MAP_TABLE + PID*10 + page] = R0;

                    multipush(R1, R2, R3, R4, R5);
                    R1 = DISK_STORE;
                    R2 = [SYSTEM_STATUS_TABLE + 1];
                    R3 = [page_table_entry + 2*page];
                    R4 = R0;
                    call DEVICE_MANAGER;
                    multipop(R1, R2, R3, R4, R5);
                endif;

                multipush(R1, R2, R3, R4, R5);
                R1 = RELEASE_PAGE;
                R2 = [page_table_entry + 2*page];
                call MEMORY_MANAGER;
                multipop(R1, R2, R3, R4, R5);

                [page_table_entry + 2*page] = -1;
                [page_table_entry + 2*page + 1] = "0000"; 
            endif;
            page = page + 1;
        endwhile;

        [process_table_entry + 6] = 1;
        [SYSTEM_STATUS_TABLE + 4] = [SYSTEM_STATUS_TABLE + 4] + 1;
    endif;
        
    [SYSTEM_STATUS_TABLE + 5] = 0;
endif;

return;