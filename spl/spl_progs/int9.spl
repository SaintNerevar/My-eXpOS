[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = INT_EXEC;

alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias filename R4;
physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
offset = (userSP - 4) % 512;
filename = [physicalPageNum*512 + offset];

//Get inode entry of filename
alias inode_entry R5;
alias fileNum R6;
fileNum = 1;
while (fileNum < MAX_FILE_NUM) do
    inode_entry = INODE_TABLE + fileNum*16;
    if (EXEC == [inode_entry] && [inode_entry + 1] == filename) then
        //breaks only if filename is found and is in XEXE
        break;
    endif;
    fileNum = fileNum + 1;
endwhile;

if (fileNum != MAX_FILE_NUM) then
    //Exit current process
    multipush(R0, R1, R2, R3, R4, R5, R6);
    R1 = EXIT_PROCESS;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    //Reclaim same User Area Page and initialize kernel SP
    [MEMORY_FREE_LIST + [process_table_entry + 11]] = [MEMORY_FREE_LIST + [process_table_entry + 11]] + 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    SP = [process_table_entry + 11]*512 - 1;

    //Initialize Per-Process Resource Table
    alias counter R12;
    counter = 0;
    while (counter < 16) do
        [[process_table_entry + 11]*512 + 496 + counter] = -1;
        counter = counter + 1;
    endwhile;

    [process_table_entry + 7] = fileNum;
    [process_table_entry + 4] = RUNNING;

    //Stack
    alias stack_page1 R7;
    multipush(R0, R1, R2, R3, R4, R5, R6);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    stack_page1 = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6);

    alias stack_page2 R8;
    multipush(R0, R1, R2, R3, R4, R5, R6, R7);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    stack_page2 = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7);

    //Allocate memory for and load first code block
    alias codePage R9;
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = GET_CODE_PAGE;
    R2 = [inode_entry + 8];
    call MEMORY_MANAGER;
    codePage = R0;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

    //Shared Library
    [PTBR] = 63;
    [PTBR + 1] = "0100";
    [PTBR + 2] = 64;
    [PTBR + 3] = "0100";

    // Heap
    [PTBR + 4] = -1;
    [PTBR + 5] = "0000";
    [PTBR + 6] = -1;
    [PTBR + 7] = "0000";

    [PTBR + 8] = codePage;
    [PTBR + 9] = "0100";
    [PTBR + 10] = -1;
    [PTBR + 11] = "0000";
    [PTBR + 12] = -1;
    [PTBR + 13] = "0000";
    [PTBR + 14] = -1;
    [PTBR + 15] = "0000";

    [PTBR + 16] = stack_page1;
    [PTBR + 17] = "0110";
    [PTBR + 18] = stack_page2;
    [PTBR + 19] = "0110";

    //Initialize disk map Table
    alias diskMapTable R10;
    diskMapTable = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10;
    counter = 0;
    while (counter < 10) do
        [diskMapTable + counter] = -1;
        counter = counter + 1;
    endwhile;
    [diskMapTable + 4] = [inode_entry + 8];
    [diskMapTable + 5] = [inode_entry + 9];
    [diskMapTable + 6] = [inode_entry + 10];
    [diskMapTable + 7] = [inode_entry + 11];

    //Set user stack pointer to code
    [[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];
else
    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1) % 512;
    [physicalPageNum*512 + offset] = -1;

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = 8*512;
ireturn;