alias functionNum R1;
alias currentPID R2;

if (functionNum == TERMINAL_WRITE) then
    alias word R3;
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);

    print word;

    multipush(R1, R2, R3);
    R1 = RELEASE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);
endif;

if (functionNum == TERMINAL_READ) then
    alias wordAddress R3;
    multipush(R1, R2, R3);
    R1 = ACQUIRE_TERMINAL;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);

    read;

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_TERMINAL;
    multipush(R1, R2, R3);
    call SCHEDULER;
    multipop(R1, R2, R3);

    alias physicalPageNum R4;
    alias offset R5;
    physicalPageNum = [PTBR + 2*(wordAddress/512)];
    offset = wordAddress % 512;
    [physicalPageNum*512 + offset] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 8];
endif;

if (functionNum == DISK_LOAD) then
    alias pageNum R3;
    alias blockNum R4;

    multipush(R1, R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = blockNum;

    load(pageNum, blockNum);

    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    
    multipush(R1, R2, R3, R4);
    call SCHEDULER;
    multipop(R1, R2, R3, R4);
endif;

if (functionNum == DISK_STORE) then
    alias pageNum R3;
    alias blockNum R4;

    multipush(R1, R2, R3, R4);
    R1 = ACQUIRE_DISK;
    R2 = currentPID;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    [DISK_STATUS_TABLE + 1] = 1;
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = blockNum;

    store(pageNum, blockNum);

    [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
    
    multipush(R1, R2, R3, R4);
    call SCHEDULER;
    multipop(R1, R2, R3, R4);
endif;

// Part from CREATE system call to reduce code length in INT4
if (functionNum == -1) then
    alias inode_index R3;
    alias filename R4;
    alias permission R5;
    alias inode_table_entry R6;
    alias process_table_entry R7;

    inode_table_entry = INODE_TABLE + inode_index*16;
    process_table_entry = PROCESS_TABLE + currentPID*16;
    
    [inode_table_entry] = DATA;
    [inode_table_entry + 1] = filename;
    [inode_table_entry + 2] = 0;
    [inode_table_entry + 3] = [process_table_entry + 3];
    [inode_table_entry + 4] = permission;

    [inode_table_entry + 8] = -1;
    [inode_table_entry + 9] = -1;
    [inode_table_entry + 10] = -1;
    [inode_table_entry + 11] = -1;

    [ROOT_FILE + inode_index*8] = filename;
    [ROOT_FILE + inode_index*8 + 1] = 0;
    [ROOT_FILE + inode_index*8 + 2] = DATA;
    [ROOT_FILE + inode_index*8 + 3] = [process_table_entry + 3];
    [ROOT_FILE + inode_index*8 + 4] = permission;
endif;

return;