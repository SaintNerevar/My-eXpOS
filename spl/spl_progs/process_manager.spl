alias functionNum R1;

if (functionNum == EXIT_PROCESS) then
    alias currentPID R2;

    multipush(R1, R2);
    R1 = FREE_PAGE_TABLE;
    R2 = currentPID;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    multipush(R1, R2);
    R1 = FREE_USER_AREA_PAGE;
    R2 = currentPID;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
    return;
endif;

if (functionNum == FREE_PAGE_TABLE) then
    alias currentPID R2;
    alias page_table_entry R3;

    page_table_entry = PAGE_TABLE_BASE + currentPID*20;
    [page_table_entry] = -1;
    [page_table_entry + 1] = "0000";
    [page_table_entry + 2] = -1;
    [page_table_entry + 3] = "0000";

    alias pageNum R4;
    pageNum = 2;
    while (pageNum < 10) do
        multipush(R1, R2, R3, R4);
        R1 = RELEASE_PAGE;
        R2 = [page_table_entry + 2*pageNum];
        call MEMORY_MANAGER;
        multipop(R1, R2, R3, R4);

        [page_table_entry + 2*pageNum] = -1;
        [page_table_entry + 2*pageNum + 1] = "0000";

        pageNum = pageNum + 1;
    endwhile;

    alias counter R5;
    alias diskMapTable R6;
    diskMapTable = DISK_MAP_TABLE + currentPID*10;
    counter = 0;
    while (counter < 10) do
        if (counter >= 4 && counter <=7) then
            [diskMapTable + counter] = -1;
        endif;

        if ([diskMapTable + counter] != -1) then
            multipush(R1, R2, R3, R4, R5, R6);
            R1 = RELEASE_BLOCK;
            R2 = [diskMapTable + counter];
            call MEMORY_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6);
            [diskMapTable + counter] = -1;
        endif;
        counter = counter + 1;
    endwhile;
    return;
endif;

if (functionNum == FREE_USER_AREA_PAGE) then
    alias currentPID R2;
    alias process_table_entry R3;

    process_table_entry = PROCESS_TABLE + currentPID*16;
    multipush(R1, R2, R3);
    R1 = RELEASE_PAGE;
    R2 = [process_table_entry + 11];
    call MEMORY_MANAGER;
    multipop(R1, R2, R3);

    return;
endif;

if (functionNum == GET_PCB_ENTRY) then
    alias PID R2;
    alias process_table_entry R3;
    PID = 2;

    while (PID < MAX_PROC_NUM) do
        process_table_entry = PROCESS_TABLE + PID*16;
        if ([process_table_entry + 4] == TERMINATED) then
            break;
        endif;
        PID = PID + 1;
    endwhile;

    if (PID != MAX_PROC_NUM) then
        [process_table_entry + 1] = PID;
        [process_table_entry + 4] = ALLOCATED;
        [process_table_entry + 14] = PAGE_TABLE_BASE + PID*20;
        [process_table_entry + 15] = 10;
        R0 = PID;
    else
        R0 = -1;
    endif;
    return;
endif;