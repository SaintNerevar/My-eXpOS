[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = INT_WRITE;

alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias fileDesc R4;
physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
offset = (userSP - 4) % 512;
fileDesc = [physicalPageNum*512 + offset];

alias word R5;
physicalPageNum = [PTBR + 2*((userSP - 3)/512)];
offset = (userSP - 3) % 512;
word = [physicalPageNum*512 + offset];

if (fileDesc == -2) then
    // Terminal Write
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = TERMINAL_WRITE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = word;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5);

    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1) % 512;
    [physicalPageNum*512 + offset] = 0;
else
    // File Write
    alias pprt_entry R6;
    pprt_entry = [process_table_entry + 11]*512 + 496 + 2*fileDesc;
    if (fileDesc < 0 || fileDesc > 7 || [pprt_entry] != FILE) then
        // Invalid file descriptor or resource is not a file
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        alias open_filetable_entry R7;
        open_filetable_entry = OPEN_FILE_TABLE + 4*[pprt_entry + 1];
        alias inode_index R8;
        inode_index = [open_filetable_entry];

        if ([process_table_entry + 3] != ROOT
            && [INODE_TABLE + 16*inode_index + 3] != [process_table_entry + 3]
            && [INODE_TABLE + 16*inode_index + 4] == EXCLUSIVE
        ) then
            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = -3;
        else
            alias return_value R9;
            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
            R1 = ACQUIRE_INODE;
            R2 = inode_index;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            return_value = R0;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

            if (return_value == -1) then
                // When would this happen?
                physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                offset = (userSP - 1) % 512;
                [physicalPageNum*512 + offset] = -1;
            else
                alias lseek R9;
                lseek = [open_filetable_entry + 2];
                if (lseek == MAX_FILE_SIZE) then
                    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                    offset = (userSP - 1) % 512;
                    [physicalPageNum*512 + offset] = -2;
                else
                    alias diskBlock R10;
                    if (lseek == [INODE_TABLE + 16*inode_index + 2]
                        && lseek % 512 == 0
                    ) then
                        // Allocate new block
                        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
                        R1 = GET_FREE_BLOCK;
                        call MEMORY_MANAGER;
                        diskBlock = R0;
                        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

                        if (diskBlock == -1) then
                            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                            offset = (userSP - 1) % 512;
                            [physicalPageNum*512 + offset] = -2;
                        else
                            [INODE_TABLE + 16*inode_index + 8 + (lseek/512)] 
                                = diskBlock;
                        endif;
                    endif;
                    
                    if (diskBlock != -1) then
                        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
                        R1 = BUFFERED_WRITE;
                        R4 = word;
                        R2 = [INODE_TABLE + 16*inode_index + 8 + (lseek/512)];
                        R3 = lseek % 512;
                        call FILE_MANAGER;
                        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

                        if (lseek == [INODE_TABLE + 16*inode_index + 2]) then
                            // Increment File size in Inode and Root copies
                            [INODE_TABLE + 16*inode_index + 2]
                                = [INODE_TABLE + 16*inode_index + 2] + 1;
                            [ROOT_FILE + 8*inode_index + 1]
                                = [ROOT_FILE + 8*inode_index + 1] + 1;
                        endif;

                        [open_filetable_entry + 2] = [open_filetable_entry + 2] + 1;

                        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                        offset = (userSP - 1) % 512;
                        [physicalPageNum*512 + offset] = 0;
                    endif;
                endif;

                multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
                R1 = RELEASE_INODE;
                R2 = inode_index;
                R3 = [SYSTEM_STATUS_TABLE + 1];
                call RESOURCE_MANAGER;
                multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
            endif;
        endif;
    endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = userSP;
ireturn;