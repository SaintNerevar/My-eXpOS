[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 7;

alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias fileDesc R4;
physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
offset = (userSP - 4) % 512;
fileDesc = [physicalPageNum*512 + offset];

if (fileDesc == -1) then
    alias wordAddress R5;
    physicalPageNum = [PTBR + 2*((userSP - 3)/512)];
    offset = (userSP - 3) % 512;
    wordAddress = [physicalPageNum*512 + offset];

    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = wordAddress;
    call DEVICE_MANAGER;

    multipop(R0, R1, R2, R3, R4, R5);
    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1);
    [physicalPageNum*512 + offset] = 0;
else
    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1);
    [physicalPageNum*512 + offset] = -1;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = userSP;
ireturn;