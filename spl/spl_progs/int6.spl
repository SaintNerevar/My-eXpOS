[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = INT_READ;

alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias fileDesc R4;
physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
offset = (userSP - 4) % 512;
fileDesc = [physicalPageNum*512 + offset];

alias wordAddress R5;
physicalPageNum = [PTBR + 2*((userSP - 3)/512)];
offset = (userSP - 3) % 512;
wordAddress = [physicalPageNum*512 + offset];

if (fileDesc == -1) then
    // Terminal Read
    multipush(R0, R1, R2, R3, R4, R5);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = wordAddress;
    call DEVICE_MANAGER;
    multipop(R0, R1, R2, R3, R4, R5);

    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1) % 512;
    [physicalPageNum*512 + offset] = 0;
else
    // File read
    alias pprt_entry R6;
    pprt_entry = [process_table_entry + 11]*512 + 496 + 2*fileDesc;
    if (fileDesc < 0 || fileDesc > 7 || [pprt_entry] != FILE) then
        // Invalid file descriptor or resource is not a file
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        alias open_filetable_entry R7;
        open_filetable_entry = OPEN_FILE_TABLE + 4*[pprt_entry + 1];
        alias inode_index R8;
        inode_index = [open_filetable_entry];

        alias return_value R9;
        multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);
        R1 = ACQUIRE_INODE;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        return_value = R0;
        multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

        if (return_value == -1) then
            // When would this happen?
            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = -1;
        else
            alias lseek R9;
            lseek = [open_filetable_entry + 2];
            if (inode_index == INODE_ROOT) then
                if (lseek == 480) then
                    // EOF reached
                    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                    offset = (userSP - 1) % 512;
                    [physicalPageNum*512 + offset] = -2;
                else
                    physicalPageNum = [PTBR + 2*(wordAddress/512)];
                    offset = wordAddress % 512;
                    
                    // wordAddress is logical. Translate and store read word
                    // Then, Increment Lseek
                    [physicalPageNum*512 + offset] = [ROOT_FILE + lseek];
                    [open_filetable_entry + 2] = [open_filetable_entry + 2] + 1;

                    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                    offset = (userSP - 1) % 512;
                    [physicalPageNum*512 + offset] = 0;
                endif;
            else
                if (lseek == [INODE_TABLE + 16*inode_index + 2]) then
                    // EOF reached
                    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                    offset = (userSP - 1) % 512;
                    [physicalPageNum*512 + offset] = -2;
                else
                    physicalPageNum = [PTBR + 2*(wordAddress/512)];
                    offset = wordAddress % 512;

                    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
                    R1 = BUFFERED_READ;
                    R4 = physicalPageNum*512 + offset;
                    R2 = [INODE_TABLE + 16*inode_index + 8 + (lseek/512)];
                    R3 = lseek % 512;
                    call FILE_MANAGER;
                    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

                    [open_filetable_entry + 2] = [open_filetable_entry + 2] + 1;

                    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
                    offset = (userSP - 1) % 512;
                    [physicalPageNum*512 + offset] = 0;
                endif;
            endif;

            multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
            R1 = RELEASE_INODE;
            R2 = inode_index;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);
        endif;
    endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = userSP;
ireturn;