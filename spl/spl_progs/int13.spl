alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias systemCallNum R4;
physicalPageNum = [PTBR + 2*((userSP - 5)/512)];
offset = (userSP - 5) % 512;
systemCallNum = [physicalPageNum*512 + offset];

[process_table_entry + 9] = systemCallNum;

if (systemCallNum == INT_SEMGET) then
    alias pprt R5;
    alias semID R6;
    pprt = [process_table_entry + 11]*512 + 496;
    semID = 0;

    //Find a free entry in per process resource table
    while (semID < 8) do
        if ([pprt + 2*semID] == -1) then
            break;
        endif;
        semID = semID + 1;
    endwhile;

    if (semID == 8) then
        //Failed to find a free entry
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        alias sem_table_index R7;
        multipush(R0, R1, R2, R3, R4, R5, R6);
        R1 = ACQUIRE_SEMAPHORE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        sem_table_index = R0;
        multipop(R0, R1, R2, R3, R4, R5, R6);

        if (sem_table_index == -1) then
            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = -2;
        else
            [pprt + 2*semID] = 1;
            [pprt + 2*semID + 1] = sem_table_index;

            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = semID;
        endif;  
    endif;
endif;

if (systemCallNum == INT_SEMRELEASE) then
    alias pprt R5;
    alias semID R6;
    pprt = [process_table_entry + 11]*512 + 496;
    physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
    offset = (userSP - 4) % 512;
    semID = [physicalPageNum*512 + offset];

    if (semID < 0 || semID > 7 || [pprt + 2*semID] != SEMAPHORE) then
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        multipush(R0, R1, R2, R3, R4, R5, R6);
        R1 = RELEASE_SEMAPHORE;
        R2 = [pprt + 2*semID + 1];
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R0, R1, R2, R3, R4, R5, R6);

        [pprt + 2*semID] = -1;
        [pprt + 2*semID + 1] = -1;

        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = 0;
    endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = userSP;
ireturn;