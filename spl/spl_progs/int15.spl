alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias systemCallNum R4;

[process_table_entry + 9] = INT_15;

if ([SYSTEM_STATUS_TABLE + 1] != 1 || [process_table_entry + 3] != 1) then
    // If the calling process is not the Root Shell, return -1
    physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
    offset = (userSP - 1) % 512;
    [physicalPageNum*512 + offset] = -1;

    [process_table_entry + 9] = 0;
    SP = userSP;
    ireturn;
endif;

// Commit changes in the Inode and User table to disk
multipush(R0, R1, R2, R3, R4);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call DEVICE_MANAGER;
multipop(R0, R1, R2, R3, R4);

multipush(R0, R1, R2, R3, R4);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call DEVICE_MANAGER;
multipop(R0, R1, R2, R3, R4);

// Commit changes to Root file back to disk
multipush(R0, R1, R2, R3, R4);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call DEVICE_MANAGER;
multipop(R0, R1, R2, R3, R4);

// Commit changes to disk free list
multipush(R0, R1, R2, R3, R4);
R1 = DISK_STORE;
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call DEVICE_MANAGER;
multipop(R0, R1, R2, R3, R4);

halt;