alias functionNum R1;

if (functionNum == GET_FREE_PAGE) then
    alias currentPID R2;
    alias process_table_entry R3;
    currentPID = [SYSTEM_STATUS_TABLE + 1];
    process_table_entry = PROCESS_TABLE + currentPID*16;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [process_table_entry + 4] = WAIT_MEM;

        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);
    endwhile;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;

    alias pageNum R4;
    pageNum = 76;
    while (pageNum < NUM_MEM_PAGES) do
        if ([MEMORY_FREE_LIST + pageNum] == 0) then
            [MEMORY_FREE_LIST + pageNum] = 1;
            R0 = pageNum;
            [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
            break;
        endif;
        pageNum = pageNum + 1;
    endwhile;
    return;
endif;

if (functionNum == RELEASE_PAGE) then
    alias pageNum R2;
    alias memory_free_list_entry R3;
    memory_free_list_entry = MEMORY_FREE_LIST + pageNum;

    [memory_free_list_entry] = [memory_free_list_entry] - 1;
    if ([memory_free_list_entry] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    alias currentPID R3;
    alias process_table_entry R4;
    currentPID = 0;
    while(currentPID < 16) do
        process_table_entry = PROCESS_TABLE + currentPID*16;
        if ([process_table_entry + 1] >= 0 && [process_table_entry + 4] == WAIT_MEM) then
            [process_table_entry + 4] = READY;
        endif;
        currentPID = currentPID + 1;
    endwhile;
    return;
endif;


//NOTE: Even though docs say this function takes PID as an
//argument, I don't see any reason for it to so far. Might
//change in the future.
if (functionNum == GET_CODE_PAGE) then
    alias diskBlock R2;
    alias diskMapTable R3;

    alias PID R4;
    alias codePage R5;
    alias page_table_entry R6;
    alias physicalPageNum R7;
    codePage = -1;
    PID = 1;
    while (PID < MAX_PROC_NUM) do
        diskMapTable = DISK_MAP_TABLE + PID*10;
        if (diskBlock == [diskMapTable + 4]) then
            codePage = 4;
        endif;
        if (diskBlock == [diskMapTable + 5]) then
            codePage = 5;
        endif;
        if (diskBlock == [diskMapTable + 6]) then
            codePage = 6;
        endif;
        if (diskBlock == [diskMapTable + 7]) then
            codePage = 7;
        endif;

        page_table_entry = PAGE_TABLE_BASE + PID*20;

        if (codePage != -1
            && [page_table_entry + 2*codePage + 1] != "0000"
        ) then
            alias memory_free_list_entry R8;
            physicalPageNum = [page_table_entry + 2*codePage];
            memory_free_list_entry = MEMORY_FREE_LIST + physicalPageNum;
            [memory_free_list_entry] = [memory_free_list_entry] + 1;
            R0 = physicalPageNum;
            return;
        else
            codePage = -1;
        endif;
        PID = PID + 1;
    endwhile;
    
    alias freePage R7;
    multipush(R1, R2, R3, R4, R5, R6);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    freePage = R0;
    multipop(R1, R2, R3, R4, R5, R6);

    multipush(R1, R2, R3, R4, R5, R6, R7);
    R4 = diskBlock;  //cuz diskBlock is R2
    R1 = DISK_LOAD;
    R2 = [SYSTEM_STATUS_TABLE + 1];  //Might cause problems.
    R3 = freePage;
    call DEVICE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6, R7);

    R0 = freePage;
    return;
endif;


if (functionNum == RELEASE_BLOCK) then
    alias diskBlock R2;

    [DISK_FREE_LIST + diskBlock] = 0;
    return; 
endif;

if (functionNum == GET_FREE_BLOCK) then
    alias diskBlock R2;
    diskBlock = DISK_FREE_AREA;

    while (diskBlock < DISK_SWAP_AREA && [DISK_FREE_LIST + diskBlock] != 0) do
        diskBlock = diskBlock + 1;
    endwhile;

    if (diskBlock >= DISK_SWAP_AREA) then
        R0 = -1;
    else
        [DISK_FREE_LIST + diskBlock] = 1;
        R0 = diskBlock;
    endif;

    return;
endif;

if (functionNum == GET_SWAP_BLOCK) then
    alias diskBlock R2;
    diskBlock = DISK_SWAP_AREA;

    while (diskBlock < DISK_SIZE && [DISK_FREE_LIST + diskBlock] != 0) do
        diskBlock = diskBlock + 1;
    endwhile;

    if (diskBlock == DISK_SIZE) then
        R0 = -1;
    else
        [DISK_FREE_LIST + diskBlock] = 1;
        R0 = diskBlock;
    endif;
    return;
endif;