alias userSP R0;
alias process_table_entry R1;
userSP = SP;
process_table_entry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

[process_table_entry + 13] = SP;
SP = [process_table_entry + 11]*512 - 1;

alias physicalPageNum R2;
alias offset R3;
alias systemCallNum R4;
physicalPageNum = [PTBR + 2*((userSP - 5)/512)];
offset = (userSP - 5) % 512;
systemCallNum = [physicalPageNum*512 + offset];

[process_table_entry + 9] = systemCallNum;

if (systemCallNum == INT_SEMLOCK) then
    alias semID R5;
    alias pprt R6;
    physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
    offset = (userSP - 4) % 512;
    semID = [physicalPageNum*512 + offset];

    pprt = [process_table_entry + 11]*512 + 496;
    if (semID < 0 || semID > 7 || [pprt + 2*semID] != SEMAPHORE) then
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        alias sem_table_entry R7;
        sem_table_entry = SEMAPHORE_TABLE + 4*[pprt + 2*semID + 1];
        while ([sem_table_entry] != [SYSTEM_STATUS_TABLE + 1]
                && [sem_table_entry] != -1
        ) do
            [process_table_entry + 4] = WAIT_SEMAPHORE;
            [process_table_entry + 5] = [pprt + 2*semID + 1];

            multipush(R0, R1, R2, R3, R4, R5, R6, R7);
            call SCHEDULER;
            multipop(R0, R1, R2, R3, R4, R5, R6, R7);
        endwhile;

        [sem_table_entry] = [SYSTEM_STATUS_TABLE + 1];

        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = 0;
    endif;
endif;

if (systemCallNum == INT_SEMUNLOCK) then
    alias semID R5;
    alias pprt R6;
    physicalPageNum = [PTBR + 2*((userSP - 4)/512)];
    offset = (userSP - 4) % 512;
    semID = [physicalPageNum*512 + offset];

    pprt = [process_table_entry + 11]*512 + 496;
    if (semID < 0 || semID > 7 || [pprt + 2*semID] != SEMAPHORE) then
        physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
        offset = (userSP - 1) % 512;
        [physicalPageNum*512 + offset] = -1;
    else
        alias sem_table_entry R7;
        sem_table_entry = SEMAPHORE_TABLE + 4*[pprt + 2*semID + 1];

        if ([sem_table_entry] != -1
            && [sem_table_entry] != [SYSTEM_STATUS_TABLE + 1]
        ) then
            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = -2;
        else
            [sem_table_entry] = -1;
            
            alias counter R8;
            counter = 0;

            while (counter < MAX_PROC_NUM) do
                if ([PROCESS_TABLE + 16*counter + 4] == WAIT_SEMAPHORE
                    && [PROCESS_TABLE + 16*counter + 5] == [pprt + 2*semID + 1]
                ) then
                    [PROCESS_TABLE + 16*counter + 4] = READY;
                endif;
                counter = counter + 1;
            endwhile;

            physicalPageNum = [PTBR + 2*((userSP - 1)/512)];
            offset = (userSP - 1) % 512;
            [physicalPageNum*512 + offset] = 0;
        endif;
    endif;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
SP = userSP;
ireturn;