alias functionNum R1;

if (functionNum == OPEN) then
    alias filename R2;
    alias inode_index R3;
    inode_index = 0;

    while (inode_index < MAX_FILE_NUM 
           && [INODE_TABLE + 16*inode_index + 1] != filename
    ) do
        inode_index = inode_index + 1;
    endwhile;

    if (inode_index >= MAX_FILE_NUM) then
        // File not found
        R0 = -1;
        return;
    endif;

    multipush(R1, R2, R3);
    R1 = ACQUIRE_INODE;
    R2 = inode_index;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3);

    if (R0 == -1) then
        // File deleted, same as not being found
        return;
    endif;

    alias inode_entry R4;
    inode_entry = INODE_TABLE + 16*inode_index;

    if ([inode_entry] == EXEC) then
        multipush(R1, R2, R3, R4);
        R1 = RELEASE_INODE;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R1, R2, R3, R4);
        R0 = -1;
        return;
    endif;

    alias open_filetable_index R5;
    open_filetable_index = 0;

    while (open_filetable_index < MAX_OPENFILE_NUM
           && [OPEN_FILE_TABLE + 4*open_filetable_index] != -1
    ) do
        open_filetable_index = open_filetable_index + 1;
    endwhile;

    if (open_filetable_index >= MAX_OPENFILE_NUM) then
        // Open File Table full
        multipush(R1, R2, R3, R4, R5);
        R1 = RELEASE_INODE;
        R2 = inode_index;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R1, R2, R3, R4, R5);
        R0 = -2;
        return;
    endif;

    alias open_filetable_entry R6;
    open_filetable_entry = OPEN_FILE_TABLE + 4*open_filetable_index;
    if (inode_index == INODE_ROOT) then
        [open_filetable_entry] = INODE_ROOT;
    else
        // File never opened before: file open count -> 1
        // File opened before: file open count -> file open count + 1
        if ([FILE_STATUS_TABLE + 4*inode_index + 1] == -1) then
            [FILE_STATUS_TABLE + 4*inode_index + 1] = 1;
        else
            [FILE_STATUS_TABLE + 4*inode_index + 1]
                = [FILE_STATUS_TABLE + 4*inode_index + 1] + 1;
        endif;
        
        [open_filetable_entry] = inode_index;
    endif;

    [open_filetable_entry + 1] = 1;
    [open_filetable_entry + 2] = 0;

    multipush(R1, R2, R3, R4, R5, R6);
    R1 = RELEASE_INODE;
    R2 = inode_index;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6);

    R0 = open_filetable_index;
    return;
endif;

if (functionNum == CLOSE) then
    alias open_filetable_index R2;
    alias open_filetable_entry R3;
    alias inode_index R4;

    open_filetable_entry = OPEN_FILE_TABLE + 4*open_filetable_index;

    inode_index = [open_filetable_entry];
    [open_filetable_entry + 1] = [open_filetable_entry + 1] - 1;

    if ([open_filetable_entry + 1] == 0) then
        [open_filetable_entry] = -1;
        [open_filetable_entry + 1] = -1;
        if (inode_index != INODE_ROOT) then
            [FILE_STATUS_TABLE + 4*inode_index + 1]
                = [FILE_STATUS_TABLE + 4*inode_index + 1] - 1;

            if ([FILE_STATUS_TABLE + 4*inode_index + 1] == 0) then
                [FILE_STATUS_TABLE + 4*inode_index + 1] = -1;
            endif;
        endif;
    endif;

    R0 = 0;
    return;
endif;

if (functionNum == BUFFERED_READ || functionNum == BUFFERED_WRITE) then
    alias diskBlock R2;
    alias offset R3;
    alias wordAddress R4;
    alias buffer R5;

    buffer = diskBlock % 4;

    multipush(R1, R2, R3, R4, R5);
    R1 = ACQUIRE_BUFFER;
    R2 = buffer;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    if ([BUFFER_TABLE + 4*buffer] != diskBlock) then
        if ([BUFFER_TABLE + 4*buffer + 1] == 1) then
            // If buffer is dirty, store it back to disk
            multipush(R1, R2, R3, R4, R5);
            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + buffer;
            R4 = [BUFFER_TABLE + 4*buffer];
            call DEVICE_MANAGER;
            multipop(R1, R2, R3, R4, R5);

            // Set dirty bit to clean
            [BUFFER_TABLE + 4*buffer + 1] = 0;
        endif;

        multipush(R1, R2, R3, R4, R5);
        R1 = DISK_LOAD;
        R4 = diskBlock;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + buffer;
        call DEVICE_MANAGER;
        multipop(R1, R2, R3, R4, R5);

        [BUFFER_TABLE + 4*buffer] = diskBlock;
    endif;

    if (functionNum == BUFFERED_READ) then
        [wordAddress] = [(71 + buffer)*512 + offset];
    else
        alias word R4; // This is actually the word itself in the case of write
        [(71 + buffer)*512 + offset] = word; 
        // Set buffer as dirty
        [BUFFER_TABLE + 4*buffer + 1] = 1;
    endif;

    multipush(R1, R2, R3, R4, R5);
    R1 = RELEASE_BUFFER;
    R2 = buffer;
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    return;
endif;